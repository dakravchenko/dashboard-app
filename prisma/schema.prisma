generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tasks     Task[]     @relation("UserTasks")
  projects  Project[]  @relation("ProjectMembers")
  accounts  Account[]  @relation("UserAccounts")
  sessions  Session[]  @relation("UserSessions")
}

model Project {
  id           String        @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  status       ProjectStatus @default(NOT_STARTED)
  locationName String?
  mapData      Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  resources    ResourceLog[]
  tasks        Task[]
  members      User[]        @relation("ProjectMembers")
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  projectId    String
  assignedToId String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignedTo   User?        @relation("UserTasks", fields: [assignedToId], references: [id])
  project      Project      @relation(fields: [projectId], references: [id])
}

model ResourceLog {
  id        String       @id @default(cuid())
  type      ResourceType
  amount    Float
  date      DateTime     @default(now())
  projectId String
  project   Project      @relation(fields: [projectId], references: [id])
}

model Account {
  id                 String @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User   @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}
enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum ResourceType {
  HOURS
  BUDGET
}

